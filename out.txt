Comment (// Package lru implements an LRU cache.\n)
Keyword (package)
Identifier (lru)
Keyword (import)
Literal ("container/list")
Comment (// Cache is an LRU cache. It is not safe for concurrent access.\n)
Keyword (type)
Identifier (Cache)
Keyword (struct)
Punctuation ({)
Comment (// MaxEntries is the maximum number of cache entries before\n)
Comment (// an item is evicted. Zero means no limit.\n)
Identifier (MaxEntries)
Identifier (int)
Comment (// OnEvicted optionally specificies a callback function to be\n)
Comment (// executed when an entry is purged from the cache.\n)
Identifier (OnEvicted)
Keyword (func)
Punctuation (()
Identifier (key)
Identifier (Key)
Punctuation (,)
Identifier (value)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation ())
Identifier (ll)
Operator (*)
Identifier (list)
Operator (.)
Identifier (List)
Identifier (cache)
Keyword (map)
Punctuation ([)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation (])
Operator (*)
Identifier (list)
Operator (.)
Identifier (Element)
Punctuation (})
Comment (// A Key may be any value that is comparable. See http://golang.org/ref/spec#Comparison_operators\n)
Keyword (type)
Identifier (Key)
Keyword (interface)
Punctuation ({)
Punctuation (})
Keyword (type)
Identifier (entry)
Keyword (struct)
Punctuation ({)
Identifier (key)
Identifier (Key)
Identifier (value)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation (})
Comment (// New creates a new Cache.\n)
Comment (// If maxEntries is zero, the cache has no limit and it's assumed\n)
Comment (// that eviction is done by the caller.\n)
Keyword (func)
Identifier (New)
Punctuation (()
Identifier (maxEntries)
Identifier (int)
Punctuation ())
Operator (*)
Identifier (Cache)
Punctuation ({)
Keyword (return)
Operator (&)
Identifier (Cache)
Punctuation ({)
Identifier (MaxEntries)
Operator (:)
Identifier (maxEntries)
Punctuation (,)
Identifier (ll)
Operator (:)
Identifier (list)
Operator (.)
Identifier (New)
Punctuation (()
Punctuation ())
Punctuation (,)
Identifier (cache)
Operator (:)
Identifier (make)
Punctuation (()
Keyword (map)
Punctuation ([)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation (])
Operator (*)
Identifier (list)
Operator (.)
Identifier (Element)
Punctuation ())
Punctuation (,)
Punctuation (})
Punctuation (})
Comment (// Add adds a value to the cache.\n)
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (Add)
Punctuation (()
Identifier (key)
Identifier (Key)
Punctuation (,)
Identifier (value)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation ())
Punctuation ({)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (==)
Identifier (nil)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (=)
Identifier (make)
Punctuation (()
Keyword (map)
Punctuation ([)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation (])
Operator (*)
Identifier (list)
Operator (.)
Identifier (Element)
Punctuation ())
Identifier (c)
Operator (.)
Identifier (ll)
Operator (=)
Identifier (list)
Operator (.)
Identifier (New)
Punctuation (()
Punctuation ())
Punctuation (})
Keyword (if)
Identifier (ee)
Punctuation (,)
Identifier (ok)
Operator (:=)
Identifier (c)
Operator (.)
Identifier (cache)
Punctuation ([)
Identifier (key)
Punctuation (])
Punctuation (;)
Identifier (ok)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (MoveToFront)
Punctuation (()
Identifier (ee)
Punctuation ())
Identifier (ee)
Operator (.)
Identifier (Value)
Operator (.)
Punctuation (()
Operator (*)
Identifier (entry)
Punctuation ())
Operator (.)
Identifier (value)
Operator (=)
Identifier (value)
Keyword (return)
Punctuation (})
Identifier (ele)
Operator (:=)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (PushFront)
Punctuation (()
Operator (&)
Identifier (entry)
Punctuation ({)
Identifier (key)
Punctuation (,)
Identifier (value)
Punctuation (})
Punctuation ())
Identifier (c)
Operator (.)
Identifier (cache)
Punctuation ([)
Identifier (key)
Punctuation (])
Operator (=)
Identifier (ele)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (MaxEntries)
Operator (!=)
Literal (0)
Operator (&&)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (Len)
Punctuation (()
Punctuation ())
Operator (>)
Identifier (c)
Operator (.)
Identifier (MaxEntries)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (RemoveOldest)
Punctuation (()
Punctuation ())
Punctuation (})
Punctuation (})
Comment (// Get looks up a key's value from the cache.\n)
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (Get)
Punctuation (()
Identifier (key)
Identifier (Key)
Punctuation ())
Punctuation (()
Identifier (value)
Keyword (interface)
Punctuation ({)
Punctuation (})
Punctuation (,)
Identifier (ok)
Identifier (bool)
Punctuation ())
Punctuation ({)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (==)
Identifier (nil)
Punctuation ({)
Keyword (return)
Punctuation (})
Keyword (if)
Identifier (ele)
Punctuation (,)
Identifier (hit)
Operator (:=)
Identifier (c)
Operator (.)
Identifier (cache)
Punctuation ([)
Identifier (key)
Punctuation (])
Punctuation (;)
Identifier (hit)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (MoveToFront)
Punctuation (()
Identifier (ele)
Punctuation ())
Keyword (return)
Identifier (ele)
Operator (.)
Identifier (Value)
Operator (.)
Punctuation (()
Operator (*)
Identifier (entry)
Punctuation ())
Operator (.)
Identifier (value)
Punctuation (,)
Identifier (true)
Punctuation (})
Keyword (return)
Punctuation (})
Comment (// Remove removes the provided key from the cache.\n)
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (Remove)
Punctuation (()
Identifier (key)
Identifier (Key)
Punctuation ())
Punctuation ({)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (==)
Identifier (nil)
Punctuation ({)
Keyword (return)
Punctuation (})
Keyword (if)
Identifier (ele)
Punctuation (,)
Identifier (hit)
Operator (:=)
Identifier (c)
Operator (.)
Identifier (cache)
Punctuation ([)
Identifier (key)
Punctuation (])
Punctuation (;)
Identifier (hit)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (removeElement)
Punctuation (()
Identifier (ele)
Punctuation ())
Punctuation (})
Punctuation (})
Comment (// RemoveOldest removes the oldest item from the cache.\n)
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (RemoveOldest)
Punctuation (()
Punctuation ())
Punctuation ({)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (==)
Identifier (nil)
Punctuation ({)
Keyword (return)
Punctuation (})
Identifier (ele)
Operator (:=)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (Back)
Punctuation (()
Punctuation ())
Keyword (if)
Identifier (ele)
Operator (!=)
Identifier (nil)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (removeElement)
Punctuation (()
Identifier (ele)
Punctuation ())
Punctuation (})
Punctuation (})
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (removeElement)
Punctuation (()
Identifier (e)
Operator (*)
Identifier (list)
Operator (.)
Identifier (Element)
Punctuation ())
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (Remove)
Punctuation (()
Identifier (e)
Punctuation ())
Identifier (kv)
Operator (:=)
Identifier (e)
Operator (.)
Identifier (Value)
Operator (.)
Punctuation (()
Operator (*)
Identifier (entry)
Punctuation ())
Identifier (delete)
Punctuation (()
Identifier (c)
Operator (.)
Identifier (cache)
Punctuation (,)
Identifier (kv)
Operator (.)
Identifier (key)
Punctuation ())
Keyword (if)
Identifier (c)
Operator (.)
Identifier (OnEvicted)
Operator (!=)
Identifier (nil)
Punctuation ({)
Identifier (c)
Operator (.)
Identifier (OnEvicted)
Punctuation (()
Identifier (kv)
Operator (.)
Identifier (key)
Punctuation (,)
Identifier (kv)
Operator (.)
Identifier (value)
Punctuation ())
Punctuation (})
Punctuation (})
Comment (// Len returns the number of items in the cache.\n)
Keyword (func)
Punctuation (()
Identifier (c)
Operator (*)
Identifier (Cache)
Punctuation ())
Identifier (Len)
Punctuation (()
Punctuation ())
Identifier (int)
Punctuation ({)
Keyword (if)
Identifier (c)
Operator (.)
Identifier (cache)
Operator (==)
Identifier (nil)
Punctuation ({)
Keyword (return)
Literal (0)
Punctuation (})
Keyword (return)
Identifier (____abs____)
Operator (.)
Identifier (ll)
Operator (.)
Identifier (Len)
Punctuation (()
Punctuation ())
Punctuation (})
